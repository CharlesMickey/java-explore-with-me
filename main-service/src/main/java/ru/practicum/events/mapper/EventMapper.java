package ru.practicum.events.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;
import ru.practicum.categories.model.Category;
import ru.practicum.events.dto.EventFullDto;
import ru.practicum.events.dto.EventShortDto;
import ru.practicum.events.dto.NewEventDto;
import ru.practicum.events.model.Event;
import ru.practicum.locations.model.Location;
import ru.practicum.statuses.EventState;
import ru.practicum.users.model.User;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring")
@Generated("AutoGeneratedByMapStruct")
public interface EventMapper {

    EventMapper INSTANCE = Mappers.getMapper(EventMapper.class);

    EventFullDto eventToEventFullDto(Event event, Long views);

    EventShortDto eventToEventShortDto(Event event, Long views);

    default List<EventShortDto> eventToEventShortDto(List<Event> events, Map<Long, Long> views) {
        return events.stream()
                .map(event -> eventToEventShortDto(event, views.getOrDefault(event.getId(), 0L)))
                .collect(Collectors.toList());
    }

    List<EventShortDto> eventToEventShortDto(List<Event> events);

    @Mapping(target = "id", ignore = true)
    @Mapping(source = "initiator", target = "initiator")
    @Mapping(source = "location", target = "location")
    @Mapping(source = "category", target = "category")
    @Mapping(source = "createdOn", target = "createdOn")
    @Mapping(source = "eventState", target = "state")
    Event newEventDtoToEvent(NewEventDto newEventDto,
                             User initiator,
                             Location location,
                             Category category,
                             LocalDateTime createdOn,
                             EventState eventState);

}
