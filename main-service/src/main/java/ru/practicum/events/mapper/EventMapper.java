package ru.practicum.events.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;
import ru.practicum.events.dto.EventFullDto;
import ru.practicum.events.dto.EventShortDto;
import ru.practicum.events.model.Event;

import javax.annotation.processing.Generated;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring")
@Generated("AutoGeneratedByMapStruct")
public interface EventMapper {

    EventMapper INSTANCE = Mappers.getMapper(EventMapper.class);

    EventFullDto eventToEventFullDto(Event event, Long views);

    EventShortDto eventToEventShortDto(Event event, Long views);

    default List<EventShortDto> eventToEventShortDto(List<Event> events, Map<Long, Long> views) {
        return events.stream()
                .map(event -> eventToEventShortDto(event, views.getOrDefault(event.getId(), 0L)))
                .collect(Collectors.toList());
    }
}
